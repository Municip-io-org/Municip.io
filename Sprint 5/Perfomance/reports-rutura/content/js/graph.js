/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 36.0, "minX": 0.0, "maxY": 4461.0, "series": [{"data": [[0.0, 36.0], [0.1, 41.0], [0.2, 93.0], [0.3, 93.0], [0.4, 473.0], [0.5, 489.0], [0.6, 518.0], [0.7, 533.0], [0.8, 534.0], [0.9, 534.0], [1.0, 534.0], [1.1, 535.0], [1.2, 535.0], [1.3, 535.0], [1.4, 535.0], [1.5, 536.0], [1.6, 537.0], [1.7, 537.0], [1.8, 537.0], [1.9, 537.0], [2.0, 539.0], [2.1, 539.0], [2.2, 540.0], [2.3, 540.0], [2.4, 540.0], [2.5, 541.0], [2.6, 542.0], [2.7, 545.0], [2.8, 545.0], [2.9, 545.0], [3.0, 546.0], [3.1, 546.0], [3.2, 549.0], [3.3, 549.0], [3.4, 549.0], [3.5, 551.0], [3.6, 552.0], [3.7, 555.0], [3.8, 830.0], [3.9, 832.0], [4.0, 834.0], [4.1, 835.0], [4.2, 835.0], [4.3, 837.0], [4.4, 839.0], [4.5, 923.0], [4.6, 928.0], [4.7, 928.0], [4.8, 932.0], [4.9, 934.0], [5.0, 935.0], [5.1, 937.0], [5.2, 940.0], [5.3, 940.0], [5.4, 941.0], [5.5, 946.0], [5.6, 948.0], [5.7, 950.0], [5.8, 951.0], [5.9, 956.0], [6.0, 957.0], [6.1, 960.0], [6.2, 962.0], [6.3, 964.0], [6.4, 969.0], [6.5, 970.0], [6.6, 972.0], [6.7, 1149.0], [6.8, 1149.0], [6.9, 1151.0], [7.0, 1151.0], [7.1, 1152.0], [7.2, 1152.0], [7.3, 1159.0], [7.4, 1161.0], [7.5, 1171.0], [7.6, 1171.0], [7.7, 1172.0], [7.8, 1173.0], [7.9, 1175.0], [8.0, 1177.0], [8.1, 1180.0], [8.2, 1180.0], [8.3, 1181.0], [8.4, 1182.0], [8.5, 1184.0], [8.6, 1185.0], [8.7, 1186.0], [8.8, 1188.0], [8.9, 1190.0], [9.0, 1193.0], [9.1, 1195.0], [9.2, 1196.0], [9.3, 1198.0], [9.4, 1198.0], [9.5, 1200.0], [9.6, 1201.0], [9.7, 1203.0], [9.8, 1204.0], [9.9, 1208.0], [10.0, 1208.0], [10.1, 1341.0], [10.2, 1446.0], [10.3, 1447.0], [10.4, 1451.0], [10.5, 1457.0], [10.6, 1458.0], [10.7, 1460.0], [10.8, 1462.0], [10.9, 1463.0], [11.0, 1465.0], [11.1, 1466.0], [11.2, 1469.0], [11.3, 1469.0], [11.4, 1470.0], [11.5, 1470.0], [11.6, 1472.0], [11.7, 1472.0], [11.8, 1475.0], [11.9, 1475.0], [12.0, 1477.0], [12.1, 1477.0], [12.2, 1478.0], [12.3, 1479.0], [12.4, 1479.0], [12.5, 1479.0], [12.6, 1480.0], [12.7, 1480.0], [12.8, 1480.0], [12.9, 1480.0], [13.0, 1483.0], [13.1, 1485.0], [13.2, 1485.0], [13.3, 1612.0], [13.4, 1613.0], [13.5, 1614.0], [13.6, 1616.0], [13.7, 1618.0], [13.8, 1618.0], [13.9, 1619.0], [14.0, 1621.0], [14.1, 1621.0], [14.2, 1621.0], [14.3, 1622.0], [14.4, 1623.0], [14.5, 1623.0], [14.6, 1625.0], [14.7, 1625.0], [14.8, 1627.0], [14.9, 1628.0], [15.0, 1628.0], [15.1, 1630.0], [15.2, 1631.0], [15.3, 1632.0], [15.4, 1633.0], [15.5, 1633.0], [15.6, 1633.0], [15.7, 1633.0], [15.8, 1634.0], [15.9, 1635.0], [16.0, 1637.0], [16.1, 1637.0], [16.2, 1637.0], [16.3, 1638.0], [16.4, 1640.0], [16.5, 1708.0], [16.6, 1709.0], [16.7, 1710.0], [16.8, 1710.0], [16.9, 1712.0], [17.0, 1712.0], [17.1, 1712.0], [17.2, 1712.0], [17.3, 1713.0], [17.4, 1713.0], [17.5, 1714.0], [17.6, 1715.0], [17.7, 1715.0], [17.8, 1760.0], [17.9, 1760.0], [18.0, 1863.0], [18.1, 1864.0], [18.2, 1864.0], [18.3, 1864.0], [18.4, 1866.0], [18.5, 1866.0], [18.6, 1868.0], [18.7, 1869.0], [18.8, 1869.0], [18.9, 1871.0], [19.0, 1872.0], [19.1, 1873.0], [19.2, 1874.0], [19.3, 1874.0], [19.4, 1875.0], [19.5, 1875.0], [19.6, 1875.0], [19.7, 1876.0], [19.8, 1876.0], [19.9, 1877.0], [20.0, 1878.0], [20.1, 1879.0], [20.2, 1880.0], [20.3, 1881.0], [20.4, 1881.0], [20.5, 1882.0], [20.6, 1882.0], [20.7, 1882.0], [20.8, 1883.0], [20.9, 1997.0], [21.0, 2003.0], [21.1, 2008.0], [21.2, 2018.0], [21.3, 2042.0], [21.4, 2052.0], [21.5, 2053.0], [21.6, 2055.0], [21.7, 2055.0], [21.8, 2057.0], [21.9, 2057.0], [22.0, 2057.0], [22.1, 2057.0], [22.2, 2058.0], [22.3, 2059.0], [22.4, 2059.0], [22.5, 2060.0], [22.6, 2060.0], [22.7, 2061.0], [22.8, 2062.0], [22.9, 2064.0], [23.0, 2064.0], [23.1, 2066.0], [23.2, 2067.0], [23.3, 2068.0], [23.4, 2068.0], [23.5, 2068.0], [23.6, 2072.0], [23.7, 2072.0], [23.8, 2074.0], [23.9, 2075.0], [24.0, 2076.0], [24.1, 2076.0], [24.2, 2077.0], [24.3, 2078.0], [24.4, 2192.0], [24.5, 2193.0], [24.6, 2194.0], [24.7, 2195.0], [24.8, 2199.0], [24.9, 2199.0], [25.0, 2201.0], [25.1, 2201.0], [25.2, 2202.0], [25.3, 2202.0], [25.4, 2202.0], [25.5, 2203.0], [25.6, 2203.0], [25.7, 2204.0], [25.8, 2205.0], [25.9, 2205.0], [26.0, 2206.0], [26.1, 2206.0], [26.2, 2212.0], [26.3, 2213.0], [26.4, 2214.0], [26.5, 2217.0], [26.6, 2218.0], [26.7, 2229.0], [26.8, 2230.0], [26.9, 2232.0], [27.0, 2233.0], [27.1, 2234.0], [27.2, 2235.0], [27.3, 2326.0], [27.4, 2345.0], [27.5, 2354.0], [27.6, 2356.0], [27.7, 2357.0], [27.8, 2358.0], [27.9, 2360.0], [28.0, 2365.0], [28.1, 2366.0], [28.2, 2368.0], [28.3, 2369.0], [28.4, 2370.0], [28.5, 2372.0], [28.6, 2374.0], [28.7, 2378.0], [28.8, 2381.0], [28.9, 2383.0], [29.0, 2383.0], [29.1, 2385.0], [29.2, 2386.0], [29.3, 2389.0], [29.4, 2391.0], [29.5, 2394.0], [29.6, 2395.0], [29.7, 2395.0], [29.8, 2399.0], [29.9, 2399.0], [30.0, 2400.0], [30.1, 2401.0], [30.2, 2406.0], [30.3, 2406.0], [30.4, 2406.0], [30.5, 2408.0], [30.6, 2409.0], [30.7, 2411.0], [30.8, 2412.0], [30.9, 2421.0], [31.0, 2425.0], [31.1, 2427.0], [31.2, 2428.0], [31.3, 2428.0], [31.4, 2429.0], [31.5, 2429.0], [31.6, 2430.0], [31.7, 2430.0], [31.8, 2431.0], [31.9, 2431.0], [32.0, 2431.0], [32.1, 2432.0], [32.2, 2433.0], [32.3, 2434.0], [32.4, 2435.0], [32.5, 2437.0], [32.6, 2437.0], [32.7, 2439.0], [32.8, 2439.0], [32.9, 2440.0], [33.0, 2440.0], [33.1, 2441.0], [33.2, 2442.0], [33.3, 2442.0], [33.4, 2442.0], [33.5, 2444.0], [33.6, 2446.0], [33.7, 2540.0], [33.8, 2543.0], [33.9, 2544.0], [34.0, 2545.0], [34.1, 2547.0], [34.2, 2548.0], [34.3, 2549.0], [34.4, 2550.0], [34.5, 2553.0], [34.6, 2555.0], [34.7, 2556.0], [34.8, 2558.0], [34.9, 2558.0], [35.0, 2558.0], [35.1, 2560.0], [35.2, 2561.0], [35.3, 2561.0], [35.4, 2562.0], [35.5, 2562.0], [35.6, 2563.0], [35.7, 2563.0], [35.8, 2564.0], [35.9, 2564.0], [36.0, 2564.0], [36.1, 2565.0], [36.2, 2565.0], [36.3, 2565.0], [36.4, 2565.0], [36.5, 2565.0], [36.6, 2566.0], [36.7, 2567.0], [36.8, 2567.0], [36.9, 2568.0], [37.0, 2568.0], [37.1, 2569.0], [37.2, 2569.0], [37.3, 2569.0], [37.4, 2569.0], [37.5, 2570.0], [37.6, 2571.0], [37.7, 2572.0], [37.8, 2572.0], [37.9, 2572.0], [38.0, 2573.0], [38.1, 2573.0], [38.2, 2573.0], [38.3, 2574.0], [38.4, 2574.0], [38.5, 2575.0], [38.6, 2576.0], [38.7, 2576.0], [38.8, 2577.0], [38.9, 2577.0], [39.0, 2578.0], [39.1, 2579.0], [39.2, 2580.0], [39.3, 2580.0], [39.4, 2584.0], [39.5, 2584.0], [39.6, 2586.0], [39.7, 2587.0], [39.8, 2650.0], [39.9, 2704.0], [40.0, 2795.0], [40.1, 2804.0], [40.2, 2809.0], [40.3, 2810.0], [40.4, 2811.0], [40.5, 2812.0], [40.6, 2812.0], [40.7, 2812.0], [40.8, 2813.0], [40.9, 2814.0], [41.0, 2814.0], [41.1, 2814.0], [41.2, 2815.0], [41.3, 2815.0], [41.4, 2816.0], [41.5, 2817.0], [41.6, 2818.0], [41.7, 2818.0], [41.8, 2820.0], [41.9, 2820.0], [42.0, 2820.0], [42.1, 2820.0], [42.2, 2820.0], [42.3, 2821.0], [42.4, 2821.0], [42.5, 2822.0], [42.6, 2822.0], [42.7, 2824.0], [42.8, 2826.0], [42.9, 2826.0], [43.0, 2827.0], [43.1, 2827.0], [43.2, 2828.0], [43.3, 2829.0], [43.4, 2831.0], [43.5, 2831.0], [43.6, 2833.0], [43.7, 2848.0], [43.8, 2852.0], [43.9, 2854.0], [44.0, 2863.0], [44.1, 2864.0], [44.2, 2876.0], [44.3, 2884.0], [44.4, 2888.0], [44.5, 3018.0], [44.6, 3027.0], [44.7, 3041.0], [44.8, 3041.0], [44.9, 3043.0], [45.0, 3044.0], [45.1, 3046.0], [45.2, 3048.0], [45.3, 3049.0], [45.4, 3052.0], [45.5, 3054.0], [45.6, 3055.0], [45.7, 3058.0], [45.8, 3061.0], [45.9, 3063.0], [46.0, 3065.0], [46.1, 3066.0], [46.2, 3068.0], [46.3, 3070.0], [46.4, 3072.0], [46.5, 3072.0], [46.6, 3074.0], [46.7, 3078.0], [46.8, 3081.0], [46.9, 3082.0], [47.0, 3084.0], [47.1, 3085.0], [47.2, 3087.0], [47.3, 3088.0], [47.4, 3091.0], [47.5, 3091.0], [47.6, 3093.0], [47.7, 3094.0], [47.8, 3132.0], [47.9, 3135.0], [48.0, 3136.0], [48.1, 3138.0], [48.2, 3140.0], [48.3, 3163.0], [48.4, 3224.0], [48.5, 3224.0], [48.6, 3224.0], [48.7, 3227.0], [48.8, 3228.0], [48.9, 3234.0], [49.0, 3234.0], [49.1, 3234.0], [49.2, 3238.0], [49.3, 3239.0], [49.4, 3240.0], [49.5, 3243.0], [49.6, 3243.0], [49.7, 3244.0], [49.8, 3244.0], [49.9, 3245.0], [50.0, 3249.0], [50.1, 3250.0], [50.2, 3251.0], [50.3, 3251.0], [50.4, 3251.0], [50.5, 3252.0], [50.6, 3255.0], [50.7, 3257.0], [50.8, 3259.0], [50.9, 3259.0], [51.0, 3261.0], [51.1, 3298.0], [51.2, 3302.0], [51.3, 3311.0], [51.4, 3319.0], [51.5, 3322.0], [51.6, 3322.0], [51.7, 3322.0], [51.8, 3323.0], [51.9, 3323.0], [52.0, 3325.0], [52.1, 3325.0], [52.2, 3325.0], [52.3, 3326.0], [52.4, 3327.0], [52.5, 3328.0], [52.6, 3328.0], [52.7, 3329.0], [52.8, 3330.0], [52.9, 3332.0], [53.0, 3335.0], [53.1, 3335.0], [53.2, 3340.0], [53.3, 3343.0], [53.4, 3344.0], [53.5, 3344.0], [53.6, 3347.0], [53.7, 3349.0], [53.8, 3349.0], [53.9, 3351.0], [54.0, 3354.0], [54.1, 3354.0], [54.2, 3355.0], [54.3, 3356.0], [54.4, 3359.0], [54.5, 3359.0], [54.6, 3360.0], [54.7, 3361.0], [54.8, 3367.0], [54.9, 3385.0], [55.0, 3500.0], [55.1, 3501.0], [55.2, 3502.0], [55.3, 3504.0], [55.4, 3504.0], [55.5, 3508.0], [55.6, 3508.0], [55.7, 3509.0], [55.8, 3509.0], [55.9, 3518.0], [56.0, 3519.0], [56.1, 3522.0], [56.2, 3524.0], [56.3, 3679.0], [56.4, 3681.0], [56.5, 3682.0], [56.6, 3683.0], [56.7, 3684.0], [56.8, 3686.0], [56.9, 3687.0], [57.0, 3688.0], [57.1, 3689.0], [57.2, 3692.0], [57.3, 3694.0], [57.4, 3694.0], [57.5, 3695.0], [57.6, 3697.0], [57.7, 3697.0], [57.8, 3698.0], [57.9, 3698.0], [58.0, 3840.0], [58.1, 3843.0], [58.2, 3847.0], [58.3, 3864.0], [58.4, 3866.0], [58.5, 3866.0], [58.6, 3868.0], [58.7, 3868.0], [58.8, 3871.0], [58.9, 3871.0], [59.0, 3871.0], [59.1, 3872.0], [59.2, 3873.0], [59.3, 3874.0], [59.4, 3876.0], [59.5, 3877.0], [59.6, 3877.0], [59.7, 3879.0], [59.8, 3879.0], [59.9, 3881.0], [60.0, 3884.0], [60.1, 3884.0], [60.2, 3886.0], [60.3, 3887.0], [60.4, 3887.0], [60.5, 3890.0], [60.6, 3890.0], [60.7, 3892.0], [60.8, 3892.0], [60.9, 3893.0], [61.0, 3895.0], [61.1, 3895.0], [61.2, 3895.0], [61.3, 3896.0], [61.4, 4052.0], [61.5, 4056.0], [61.6, 4058.0], [61.7, 4059.0], [61.8, 4059.0], [61.9, 4060.0], [62.0, 4060.0], [62.1, 4060.0], [62.2, 4061.0], [62.3, 4063.0], [62.4, 4064.0], [62.5, 4064.0], [62.6, 4065.0], [62.7, 4066.0], [62.8, 4066.0], [62.9, 4066.0], [63.0, 4066.0], [63.1, 4068.0], [63.2, 4071.0], [63.3, 4072.0], [63.4, 4072.0], [63.5, 4072.0], [63.6, 4073.0], [63.7, 4073.0], [63.8, 4073.0], [63.9, 4073.0], [64.0, 4074.0], [64.1, 4074.0], [64.2, 4074.0], [64.3, 4075.0], [64.4, 4075.0], [64.5, 4075.0], [64.6, 4075.0], [64.7, 4076.0], [64.8, 4076.0], [64.9, 4077.0], [65.0, 4077.0], [65.1, 4077.0], [65.2, 4077.0], [65.3, 4078.0], [65.4, 4078.0], [65.5, 4078.0], [65.6, 4078.0], [65.7, 4078.0], [65.8, 4078.0], [65.9, 4079.0], [66.0, 4079.0], [66.1, 4079.0], [66.2, 4079.0], [66.3, 4079.0], [66.4, 4080.0], [66.5, 4080.0], [66.6, 4080.0], [66.7, 4080.0], [66.8, 4080.0], [66.9, 4080.0], [67.0, 4080.0], [67.1, 4080.0], [67.2, 4080.0], [67.3, 4080.0], [67.4, 4080.0], [67.5, 4081.0], [67.6, 4081.0], [67.7, 4081.0], [67.8, 4081.0], [67.9, 4081.0], [68.0, 4081.0], [68.1, 4081.0], [68.2, 4081.0], [68.3, 4081.0], [68.4, 4081.0], [68.5, 4081.0], [68.6, 4082.0], [68.7, 4082.0], [68.8, 4082.0], [68.9, 4082.0], [69.0, 4082.0], [69.1, 4082.0], [69.2, 4082.0], [69.3, 4082.0], [69.4, 4082.0], [69.5, 4083.0], [69.6, 4083.0], [69.7, 4083.0], [69.8, 4083.0], [69.9, 4083.0], [70.0, 4083.0], [70.1, 4083.0], [70.2, 4083.0], [70.3, 4083.0], [70.4, 4083.0], [70.5, 4084.0], [70.6, 4084.0], [70.7, 4084.0], [70.8, 4084.0], [70.9, 4084.0], [71.0, 4084.0], [71.1, 4084.0], [71.2, 4084.0], [71.3, 4084.0], [71.4, 4085.0], [71.5, 4085.0], [71.6, 4085.0], [71.7, 4085.0], [71.8, 4086.0], [71.9, 4086.0], [72.0, 4086.0], [72.1, 4086.0], [72.2, 4086.0], [72.3, 4086.0], [72.4, 4086.0], [72.5, 4086.0], [72.6, 4087.0], [72.7, 4087.0], [72.8, 4087.0], [72.9, 4087.0], [73.0, 4088.0], [73.1, 4088.0], [73.2, 4088.0], [73.3, 4088.0], [73.4, 4088.0], [73.5, 4088.0], [73.6, 4090.0], [73.7, 4090.0], [73.8, 4090.0], [73.9, 4090.0], [74.0, 4090.0], [74.1, 4090.0], [74.2, 4090.0], [74.3, 4090.0], [74.4, 4091.0], [74.5, 4091.0], [74.6, 4091.0], [74.7, 4091.0], [74.8, 4091.0], [74.9, 4092.0], [75.0, 4092.0], [75.1, 4092.0], [75.2, 4092.0], [75.3, 4093.0], [75.4, 4093.0], [75.5, 4093.0], [75.6, 4093.0], [75.7, 4093.0], [75.8, 4094.0], [75.9, 4094.0], [76.0, 4094.0], [76.1, 4094.0], [76.2, 4094.0], [76.3, 4094.0], [76.4, 4095.0], [76.5, 4095.0], [76.6, 4095.0], [76.7, 4096.0], [76.8, 4096.0], [76.9, 4096.0], [77.0, 4096.0], [77.1, 4097.0], [77.2, 4097.0], [77.3, 4097.0], [77.4, 4097.0], [77.5, 4097.0], [77.6, 4097.0], [77.7, 4097.0], [77.8, 4097.0], [77.9, 4098.0], [78.0, 4098.0], [78.1, 4098.0], [78.2, 4098.0], [78.3, 4098.0], [78.4, 4098.0], [78.5, 4099.0], [78.6, 4099.0], [78.7, 4099.0], [78.8, 4100.0], [78.9, 4100.0], [79.0, 4100.0], [79.1, 4100.0], [79.2, 4100.0], [79.3, 4100.0], [79.4, 4101.0], [79.5, 4101.0], [79.6, 4101.0], [79.7, 4101.0], [79.8, 4101.0], [79.9, 4103.0], [80.0, 4103.0], [80.1, 4104.0], [80.2, 4105.0], [80.3, 4105.0], [80.4, 4106.0], [80.5, 4106.0], [80.6, 4107.0], [80.7, 4107.0], [80.8, 4107.0], [80.9, 4108.0], [81.0, 4115.0], [81.1, 4116.0], [81.2, 4116.0], [81.3, 4117.0], [81.4, 4117.0], [81.5, 4118.0], [81.6, 4119.0], [81.7, 4119.0], [81.8, 4120.0], [81.9, 4120.0], [82.0, 4120.0], [82.1, 4120.0], [82.2, 4120.0], [82.3, 4121.0], [82.4, 4123.0], [82.5, 4123.0], [82.6, 4123.0], [82.7, 4124.0], [82.8, 4124.0], [82.9, 4125.0], [83.0, 4125.0], [83.1, 4125.0], [83.2, 4126.0], [83.3, 4126.0], [83.4, 4126.0], [83.5, 4126.0], [83.6, 4126.0], [83.7, 4126.0], [83.8, 4126.0], [83.9, 4126.0], [84.0, 4126.0], [84.1, 4127.0], [84.2, 4127.0], [84.3, 4127.0], [84.4, 4128.0], [84.5, 4128.0], [84.6, 4128.0], [84.7, 4129.0], [84.8, 4131.0], [84.9, 4131.0], [85.0, 4131.0], [85.1, 4131.0], [85.2, 4131.0], [85.3, 4132.0], [85.4, 4132.0], [85.5, 4132.0], [85.6, 4132.0], [85.7, 4132.0], [85.8, 4132.0], [85.9, 4133.0], [86.0, 4133.0], [86.1, 4134.0], [86.2, 4134.0], [86.3, 4134.0], [86.4, 4134.0], [86.5, 4134.0], [86.6, 4134.0], [86.7, 4134.0], [86.8, 4135.0], [86.9, 4135.0], [87.0, 4135.0], [87.1, 4135.0], [87.2, 4135.0], [87.3, 4136.0], [87.4, 4136.0], [87.5, 4138.0], [87.6, 4152.0], [87.7, 4152.0], [87.8, 4153.0], [87.9, 4156.0], [88.0, 4157.0], [88.1, 4159.0], [88.2, 4159.0], [88.3, 4160.0], [88.4, 4161.0], [88.5, 4162.0], [88.6, 4184.0], [88.7, 4185.0], [88.8, 4185.0], [88.9, 4185.0], [89.0, 4185.0], [89.1, 4186.0], [89.2, 4186.0], [89.3, 4186.0], [89.4, 4188.0], [89.5, 4188.0], [89.6, 4188.0], [89.7, 4188.0], [89.8, 4191.0], [89.9, 4197.0], [90.0, 4198.0], [90.1, 4200.0], [90.2, 4200.0], [90.3, 4201.0], [90.4, 4201.0], [90.5, 4202.0], [90.6, 4202.0], [90.7, 4202.0], [90.8, 4203.0], [90.9, 4204.0], [91.0, 4205.0], [91.1, 4207.0], [91.2, 4208.0], [91.3, 4208.0], [91.4, 4210.0], [91.5, 4242.0], [91.6, 4243.0], [91.7, 4243.0], [91.8, 4243.0], [91.9, 4244.0], [92.0, 4245.0], [92.1, 4246.0], [92.2, 4248.0], [92.3, 4250.0], [92.4, 4254.0], [92.5, 4255.0], [92.6, 4255.0], [92.7, 4256.0], [92.8, 4257.0], [92.9, 4258.0], [93.0, 4259.0], [93.1, 4259.0], [93.2, 4259.0], [93.3, 4260.0], [93.4, 4261.0], [93.5, 4262.0], [93.6, 4262.0], [93.7, 4264.0], [93.8, 4264.0], [93.9, 4265.0], [94.0, 4266.0], [94.1, 4267.0], [94.2, 4267.0], [94.3, 4269.0], [94.4, 4269.0], [94.5, 4280.0], [94.6, 4282.0], [94.7, 4283.0], [94.8, 4284.0], [94.9, 4284.0], [95.0, 4284.0], [95.1, 4285.0], [95.2, 4298.0], [95.3, 4355.0], [95.4, 4356.0], [95.5, 4356.0], [95.6, 4358.0], [95.7, 4359.0], [95.8, 4359.0], [95.9, 4361.0], [96.0, 4361.0], [96.1, 4361.0], [96.2, 4361.0], [96.3, 4363.0], [96.4, 4374.0], [96.5, 4374.0], [96.6, 4374.0], [96.7, 4375.0], [96.8, 4375.0], [96.9, 4375.0], [97.0, 4375.0], [97.1, 4375.0], [97.2, 4375.0], [97.3, 4376.0], [97.4, 4376.0], [97.5, 4376.0], [97.6, 4376.0], [97.7, 4377.0], [97.8, 4377.0], [97.9, 4377.0], [98.0, 4427.0], [98.1, 4430.0], [98.2, 4430.0], [98.3, 4431.0], [98.4, 4433.0], [98.5, 4434.0], [98.6, 4435.0], [98.7, 4435.0], [98.8, 4436.0], [98.9, 4437.0], [99.0, 4438.0], [99.1, 4438.0], [99.2, 4439.0], [99.3, 4441.0], [99.4, 4441.0], [99.5, 4444.0], [99.6, 4453.0], [99.7, 4454.0], [99.8, 4459.0], [99.9, 4460.0], [100.0, 4461.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 174.0, "series": [{"data": [[0.0, 4.0], [800.0, 8.0], [900.0, 22.0], [1100.0, 28.0], [1200.0, 6.0], [1300.0, 1.0], [1400.0, 31.0], [1600.0, 32.0], [1700.0, 15.0], [1800.0, 29.0], [1900.0, 1.0], [2000.0, 33.0], [2100.0, 6.0], [2200.0, 23.0], [2300.0, 27.0], [2400.0, 37.0], [2500.0, 61.0], [2600.0, 1.0], [2700.0, 2.0], [2800.0, 44.0], [3000.0, 33.0], [3100.0, 6.0], [3300.0, 38.0], [3200.0, 28.0], [3500.0, 13.0], [3600.0, 17.0], [3800.0, 34.0], [4000.0, 174.0], [4100.0, 113.0], [4200.0, 52.0], [4300.0, 27.0], [4400.0, 21.0], [400.0, 2.0], [500.0, 31.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1.500ms"], [2, "Requests having \nresponse time > 1.500ms"], [3, "Requests in error"]], "maxY": 512.0, "series": [{"data": [[0.0, 6.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 127.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1.500ms", "isController": false}, {"data": [[2.0, 512.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1.500ms", "isController": false}, {"data": [[3.0, 355.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 479.6880000000003, "minX": 1.7127714E12, "maxY": 479.6880000000003, "series": [{"data": [[1.7127714E12, 479.6880000000003]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7127714E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 36.0, "minX": 3.0, "maxY": 4454.0, "series": [{"data": [[3.0, 94.0], [4.0, 36.0], [5.0, 41.0], [9.0, 4427.0], [10.0, 4439.666666666667], [12.0, 4430.0], [13.0, 4432.5], [14.0, 4435.5], [15.0, 4433.333333333333], [17.0, 4441.0], [18.0, 4439.5], [21.0, 4454.0], [27.0, 4361.0], [30.0, 4355.0], [31.0, 4359.0], [33.0, 4357.0], [34.0, 4357.5], [36.0, 4361.666666666667], [38.0, 4369.0], [40.0, 4374.5], [43.0, 4376.0], [44.0, 4375.666666666667], [47.0, 4375.5], [48.0, 4375.6], [58.0, 4246.0], [60.0, 4245.0], [67.0, 4186.0], [65.0, 4256.0], [64.0, 4285.0], [71.0, 4249.666666666667], [68.0, 4231.666666666667], [74.0, 4258.0], [72.0, 4255.666666666667], [79.0, 4262.0], [76.0, 4262.0], [83.0, 4105.0], [82.0, 4260.142857142857], [80.0, 4260.0], [87.0, 4155.5], [86.0, 4156.0], [91.0, 4160.5], [90.0, 4162.0], [94.0, 4152.5], [93.0, 4158.0], [99.0, 4298.0], [98.0, 4282.5], [96.0, 4283.0], [111.0, 4138.0], [114.0, 4094.0], [112.0, 4097.0], [118.0, 4099.0], [117.0, 4095.3333333333335], [123.0, 4100.0], [122.0, 4100.0], [121.0, 4100.5], [120.0, 4093.0], [127.0, 4133.333333333333], [125.0, 4100.0], [133.0, 4134.0], [132.0, 4135.333333333333], [131.0, 4134.333333333333], [128.0, 4134.0], [143.0, 4126.333333333333], [142.0, 4126.0], [139.0, 4132.666666666667], [136.0, 4134.666666666667], [151.0, 4126.5], [149.0, 4126.25], [148.0, 4126.0], [146.0, 4127.333333333333], [145.0, 4127.0], [159.0, 4125.0], [158.0, 4126.0], [157.0, 4131.0], [155.0, 4131.0], [154.0, 4131.75], [152.0, 4132.0], [166.0, 4115.0], [165.0, 4116.0], [164.0, 4119.0], [163.0, 4120.0], [162.0, 4123.0], [161.0, 4124.0], [160.0, 4126.0], [175.0, 4094.6666666666665], [172.0, 4097.0], [183.0, 4138.5], [180.0, 4093.0], [179.0, 4090.6666666666665], [176.0, 4091.0], [191.0, 4106.0], [190.0, 4107.0], [189.0, 4108.0], [188.0, 4188.75], [186.0, 4186.333333333333], [185.0, 4185.5], [199.0, 4079.0], [198.0, 4099.0], [197.0, 4100.0], [196.0, 4103.0], [195.0, 4101.0], [194.0, 4103.0], [193.0, 4105.0], [192.0, 4106.0], [207.0, 4066.0], [206.0, 4068.0], [205.0, 4071.0], [204.0, 4072.0], [203.0, 4075.0], [202.0, 4074.0], [201.0, 4075.0], [200.0, 4078.0], [215.0, 4090.0], [214.0, 4090.0], [213.0, 4091.0], [212.0, 4090.0], [211.0, 4054.0], [210.0, 4066.0], [208.0, 4066.0], [220.0, 4123.0], [219.0, 4123.0], [216.0, 4101.0], [231.0, 4095.5], [230.0, 4097.25], [229.0, 4087.6666666666665], [227.0, 4121.0], [225.0, 4120.0], [239.0, 4120.0], [238.0, 4085.0], [237.0, 4091.0], [236.0, 4120.0], [235.0, 4103.0], [234.0, 4103.0], [232.0, 4084.0], [247.0, 4088.0], [246.0, 4087.0], [245.0, 4101.5], [243.0, 4090.0], [242.0, 4099.5], [240.0, 4088.0], [255.0, 4083.0], [254.0, 4084.5], [251.0, 4083.0], [250.0, 4087.0], [249.0, 4117.0], [248.0, 4086.0], [264.0, 4082.0], [271.0, 4093.0], [267.0, 4083.0], [266.0, 4080.0], [265.0, 4084.0], [263.0, 4081.5], [261.0, 4080.0], [259.0, 4080.5], [257.0, 4078.0], [256.0, 4101.0], [275.0, 4095.0], [287.0, 4082.5], [284.0, 4082.5], [282.0, 4098.0], [281.0, 4097.0], [280.0, 4097.0], [279.0, 4097.0], [278.0, 4097.5], [276.0, 4096.0], [274.0, 4094.0], [272.0, 4096.0], [291.0, 4084.0], [301.0, 4063.0], [300.0, 4061.0], [299.0, 4062.0], [297.0, 4060.0], [296.0, 4060.0], [295.0, 4061.5], [293.0, 4085.5], [292.0, 4087.0], [290.0, 4083.0], [289.0, 4086.0], [288.0, 4082.0], [350.0, 3682.0], [351.0, 3681.0], [349.0, 3684.0], [348.0, 3683.0], [347.0, 3686.0], [346.0, 3687.0], [345.0, 3688.0], [344.0, 3689.0], [343.0, 3842.7142857142862], [366.0, 4202.0], [367.0, 4207.0], [365.0, 3500.0], [364.0, 3504.0], [363.0, 3501.0], [362.0, 3504.0], [361.0, 3502.0], [360.0, 3508.0], [359.0, 3509.0], [353.0, 3522.0], [352.0, 3679.0], [355.0, 3518.0], [354.0, 3524.0], [358.0, 3508.0], [357.0, 3509.0], [356.0, 3519.0], [381.0, 4208.0], [383.0, 4080.0], [380.0, 4205.0], [371.0, 4198.0], [369.0, 4202.0], [368.0, 4200.0], [379.0, 4208.0], [378.0, 4207.0], [376.0, 4199.5], [374.0, 4201.0], [373.0, 4203.0], [372.0, 4200.5], [398.0, 3370.2], [399.0, 535.0], [397.0, 535.0], [396.0, 2900.3333333333335], [395.0, 535.0], [394.0, 535.0], [393.0, 534.0], [392.0, 533.0], [391.0, 534.0], [385.0, 3367.0], [384.0, 4083.0], [387.0, 3360.0], [386.0, 3359.0], [390.0, 3351.0], [389.0, 3359.0], [388.0, 3361.0], [414.0, 546.0], [415.0, 546.0], [413.0, 545.0], [412.0, 1944.0], [411.0, 1942.5], [410.0, 1938.0], [409.0, 1943.0], [408.0, 1943.5], [407.0, 1944.5], [401.0, 3011.5], [400.0, 2310.0], [403.0, 1947.5], [402.0, 2898.3333333333335], [406.0, 1944.0], [405.0, 1946.5], [404.0, 1946.5], [420.0, 514.0], [422.0, 503.5], [419.0, 551.0], [418.0, 552.0], [417.0, 549.0], [416.0, 549.0], [445.0, 4075.0], [451.0, 4076.3333333333335], [462.0, 4082.0], [461.0, 4086.0], [459.0, 4083.5], [458.0, 4081.0], [457.0, 4083.0], [455.0, 4078.0], [452.0, 4073.0], [450.0, 4078.0], [448.0, 4075.0], [476.0, 4097.666666666667], [475.0, 4101.0], [473.0, 4098.0], [472.0, 4093.5], [470.0, 4092.0], [469.0, 4090.3333333333335], [467.0, 4090.6666666666665], [466.0, 4082.0], [540.0, 3049.0], [543.0, 3041.0], [529.0, 3072.0], [528.0, 3070.0], [531.0, 3068.0], [530.0, 3072.0], [533.0, 3066.0], [532.0, 3065.0], [542.0, 3044.0], [541.0, 3048.0], [539.0, 3052.0], [538.0, 3055.0], [537.0, 3058.0], [536.0, 3054.0], [527.0, 3074.0], [515.0, 3533.8169014084506], [517.0, 3094.0], [516.0, 3093.0], [519.0, 3091.0], [518.0, 3091.0], [526.0, 3078.0], [525.0, 3082.0], [524.0, 3081.0], [523.0, 3084.0], [522.0, 3087.0], [521.0, 3088.0], [520.0, 3085.0], [535.0, 3061.0], [534.0, 3063.0], [559.0, 2810.0], [562.0, 3344.0], [561.0, 3335.0], [560.0, 2820.0], [551.0, 2888.0], [550.0, 2864.0], [549.0, 2876.0], [548.0, 3018.0], [547.0, 3027.0], [546.0, 3046.0], [545.0, 3041.0], [544.0, 3043.0], [558.0, 2815.0], [557.0, 3385.0], [556.0, 2848.0], [555.0, 2854.0], [554.0, 2852.0], [553.0, 2884.0], [552.0, 2863.0], [604.0, 2550.0], [607.0, 2547.0], [593.0, 2570.0], [592.0, 2572.0], [595.0, 2567.0], [594.0, 2567.0], [597.0, 2564.0], [596.0, 2565.0], [606.0, 2548.0], [605.0, 2549.0], [603.0, 2553.0], [602.0, 2555.0], [601.0, 2558.0], [600.0, 2558.0], [591.0, 2572.0], [579.0, 2932.764705882353], [581.0, 2650.0], [580.0, 3163.0], [583.0, 2586.0], [582.0, 2587.0], [590.0, 2573.0], [589.0, 2574.0], [588.0, 2577.0], [587.0, 2579.0], [586.0, 2580.0], [585.0, 2584.0], [584.0, 2584.0], [599.0, 2558.0], [598.0, 2561.0], [636.0, 2370.0], [639.0, 2358.0], [625.0, 2394.0], [624.0, 2395.0], [627.0, 2389.0], [626.0, 2391.0], [629.0, 2386.0], [628.0, 2385.0], [638.0, 2360.0], [637.0, 2365.0], [635.0, 2372.0], [634.0, 2374.0], [633.0, 2378.0], [632.0, 2381.0], [623.0, 2395.0], [609.0, 2544.0], [608.0, 2545.0], [611.0, 2540.0], [610.0, 2543.0], [613.0, 2411.0], [612.0, 2412.0], [615.0, 2408.0], [614.0, 2409.0], [622.0, 2399.0], [621.0, 2399.0], [620.0, 2400.0], [619.0, 2401.0], [618.0, 2406.0], [617.0, 2406.0], [616.0, 2406.0], [631.0, 2383.0], [630.0, 2383.0], [659.0, 834.3333333333334], [658.0, 837.0], [643.0, 2345.0], [642.0, 2354.0], [641.0, 2356.0], [640.0, 2357.0], [700.0, 2569.0], [703.0, 2563.0], [689.0, 2568.0], [688.0, 2571.0], [691.0, 2569.0], [690.0, 2569.0], [693.0, 2565.0], [692.0, 2569.0], [702.0, 2562.0], [701.0, 2564.0], [699.0, 2564.0], [698.0, 2566.0], [697.0, 2560.0], [696.0, 2563.0], [687.0, 2568.0], [675.0, 2704.0], [674.0, 2621.3870967741937], [677.0, 2580.0], [676.0, 2042.0], [679.0, 2578.0], [678.0, 2577.0], [686.0, 2573.0], [685.0, 2576.0], [684.0, 2576.0], [683.0, 2573.0], [682.0, 2572.0], [681.0, 2575.0], [680.0, 2574.0], [695.0, 2565.0], [694.0, 2565.0], [717.0, 2439.0], [720.0, 2437.0], [711.0, 2442.0], [710.0, 2446.0], [709.0, 2442.0], [708.0, 2444.0], [707.0, 2556.0], [706.0, 2562.0], [705.0, 2561.0], [704.0, 2565.0], [719.0, 2435.0], [718.0, 2440.0], [716.0, 2442.0], [715.0, 2432.0], [714.0, 2441.0], [713.0, 2440.0], [712.0, 2439.0], [764.0, 2206.0], [767.0, 2203.0], [753.0, 1713.0], [752.0, 1715.0], [755.0, 2217.0], [754.0, 1712.0], [757.0, 2214.0], [756.0, 2218.0], [766.0, 2204.0], [765.0, 2205.0], [763.0, 1709.0], [762.0, 1710.0], [761.0, 1710.0], [760.0, 1708.0], [751.0, 1712.0], [739.0, 2414.368421052631], [741.0, 2235.0], [740.0, 2233.0], [743.0, 2234.0], [742.0, 2232.0], [750.0, 1712.0], [749.0, 1713.0], [748.0, 1712.0], [747.0, 1715.0], [746.0, 1714.0], [745.0, 2230.0], [744.0, 2229.0], [759.0, 2213.0], [758.0, 2212.0], [796.0, 2057.0], [799.0, 2053.0], [785.0, 2064.0], [784.0, 2064.0], [787.0, 2061.0], [786.0, 2062.0], [789.0, 2059.0], [788.0, 2059.0], [798.0, 2055.0], [797.0, 2055.0], [795.0, 2057.0], [794.0, 2060.0], [793.0, 2060.0], [792.0, 2058.0], [783.0, 2066.0], [769.0, 2202.0], [768.0, 2202.0], [771.0, 2201.0], [770.0, 2202.0], [773.0, 2077.0], [772.0, 2078.0], [775.0, 2076.0], [774.0, 2076.0], [782.0, 2068.0], [781.0, 2068.0], [780.0, 2067.0], [779.0, 2068.0], [778.0, 2072.0], [777.0, 2074.0], [776.0, 2075.0], [791.0, 2057.0], [790.0, 2057.0], [828.0, 1866.0], [827.0, 1395.5], [830.0, 1240.6666666666667], [831.0, 1864.0], [819.0, 1878.8000000000002], [821.0, 1874.0], [820.0, 1874.0], [829.0, 1863.0], [826.0, 1869.0], [825.0, 1869.0], [824.0, 1871.0], [804.0, 2002.6666666666667], [801.0, 2018.0], [800.0, 2052.0], [823.0, 1872.0], [822.0, 1873.0], [837.0, 1286.0], [847.0, 1286.0], [849.0, 1084.0], [845.0, 1286.5], [844.0, 1633.0], [843.0, 1633.0], [846.0, 1633.0], [842.0, 1285.5], [841.0, 1285.0], [840.0, 1637.0], [835.0, 1346.0], [834.0, 1760.0], [833.0, 1864.0], [832.0, 1864.0], [836.0, 1640.0], [848.0, 1288.5], [862.0, 964.0], [863.0, 1618.3333333333333], [858.0, 1290.5], [857.0, 1622.0], [856.0, 1623.0], [839.0, 1637.0], [838.0, 1637.0], [859.0, 1621.0], [860.0, 1291.5], [854.0, 1179.3333333333333], [853.0, 1625.0], [852.0, 1627.0], [851.0, 1628.0], [850.0, 1628.0], [855.0, 1623.0], [891.0, 1463.0], [865.0, 1131.25], [879.0, 1477.0], [864.0, 1616.0], [878.0, 1478.0], [877.0, 1479.0], [876.0, 1479.0], [875.0, 1479.0], [874.0, 1480.0], [873.0, 1480.0], [872.0, 1480.0], [892.0, 1462.0], [881.0, 1475.0], [880.0, 1477.0], [883.0, 1472.0], [882.0, 1475.0], [890.0, 1465.0], [889.0, 1466.0], [888.0, 1469.0], [871.0, 1480.0], [870.0, 1483.0], [869.0, 1485.0], [868.0, 1485.0], [867.0, 1612.0], [866.0, 1613.0], [887.0, 1469.0], [886.0, 1470.0], [885.0, 1470.0], [884.0, 1472.0], [924.0, 1171.0], [927.0, 1159.0], [913.0, 1186.0], [912.0, 1188.0], [915.0, 1184.0], [914.0, 1185.0], [917.0, 1181.0], [916.0, 1182.0], [926.0, 1161.0], [925.0, 1171.0], [923.0, 1172.0], [922.0, 1173.0], [921.0, 1175.0], [920.0, 1177.0], [911.0, 1190.0], [899.0, 1341.0], [898.0, 1453.1666666666665], [901.0, 1208.0], [900.0, 1208.0], [903.0, 1203.0], [902.0, 1204.0], [910.0, 1193.0], [909.0, 1195.0], [908.0, 1196.0], [907.0, 1198.0], [906.0, 1198.0], [905.0, 1200.0], [904.0, 1201.0], [919.0, 1180.0], [918.0, 1180.0], [933.0, 1151.0], [931.0, 1151.0], [928.0, 1149.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[479.6880000000003, 3029.1739999999986]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 933.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1279.25, "minX": 1.7127714E12, "maxY": 32517.833333333332, "series": [{"data": [[1.7127714E12, 32517.833333333332]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7127714E12, 1279.25]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7127714E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3029.1739999999986, "minX": 1.7127714E12, "maxY": 3029.1739999999986, "series": [{"data": [[1.7127714E12, 3029.1739999999986]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7127714E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1550.644999999999, "minX": 1.7127714E12, "maxY": 1550.644999999999, "series": [{"data": [[1.7127714E12, 1550.644999999999]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7127714E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2945.4939999999997, "minX": 1.7127714E12, "maxY": 2945.4939999999997, "series": [{"data": [[1.7127714E12, 2945.4939999999997]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7127714E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 36.0, "minX": 1.7127714E12, "maxY": 4126.0, "series": [{"data": [[1.7127714E12, 4126.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7127714E12, 3844.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7127714E12, 4119.54]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7127714E12, 4005.1999999999894]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7127714E12, 36.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7127714E12, 2434.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7127714E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 67.0, "minX": 4.0, "maxY": 4284.5, "series": [{"data": [[4.0, 67.0], [71.0, 834.0], [140.0, 1623.0], [142.0, 2431.0], [160.0, 2850.0], [385.0, 3845.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[385.0, 4093.0], [98.0, 4284.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 385.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 4.0, "maxY": 3845.0, "series": [{"data": [[4.0, 67.0], [71.0, 834.0], [140.0, 1623.0], [142.0, 2431.0], [160.0, 2850.0], [385.0, 3845.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[385.0, 0.0], [98.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 385.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.7127714E12, "maxY": 16.666666666666668, "series": [{"data": [[1.7127714E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7127714E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 5.916666666666667, "minX": 1.7127714E12, "maxY": 10.75, "series": [{"data": [[1.7127714E12, 10.75]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.7127714E12, 5.916666666666667]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7127714E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 5.916666666666667, "minX": 1.7127714E12, "maxY": 10.75, "series": [{"data": [[1.7127714E12, 10.75]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.7127714E12, 5.916666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7127714E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5.916666666666667, "minX": 1.7127714E12, "maxY": 10.75, "series": [{"data": [[1.7127714E12, 10.75]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7127714E12, 5.916666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7127714E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

